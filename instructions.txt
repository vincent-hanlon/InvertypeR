0. OVERVIEW 

These step-by-step instructions detail how to turn a set of FASTQ-formatted Strand-seq libraries into inversion genotype calls. First, we align the FASTQ files
and select high-quality Strand-seq libraries. Second, we use the aligned BAM files to generate two composite files for the sample. Third, we install and run 
InvertypeR to call inversion genotypes. Fourth, we create plots and UCSC Genome Browser sessiosn to visualize the inversions.

We assume that you use Bash (a Unix shell), and that you have installed all the software listed on the README of the git repository. We also assume you have 
cloned the repository, and that you have a set of gzipped, paired-end Strand-seq FASTQ files for a single individual that you would like to analyze.

	code: 
		git clone https://github.com/vincent-hanlon/InvertypeR.git



1. ALIGNMENT

If your Strand-seq libraries are already aligned BAM files, you can skip ahead to quality selection at the end of this section. 

Put the FASTQ files in their own directory. We want to run the basic alignment script provided (InvertypeR/composite_files/alignment.sh), but first some details
of the script need to be altered. Open the alignment script with your text editor. If necessary, change the adapter sequences to be trimmed (flags -a 
and -A). If you made the Strand-seq libraries, you know what adapter sequences to use. If you obtained the Strand-seq libraries from an online database, the 
accompanying information may tell you what adapters sequences need to be trimmed (or perhaps they were already removed). If you have no information about the
adapters used in sequencing, try running a tool such as FASTQC (https://www.bioinformatics.babraham.ac.uk/projects/fastqc/) and examining the "Overrepresented
Sequences" section to see what adapter sequences are present. Finally, substitute the path to your bowtie2-indexed copy of the GRCh38 reference genome (the
indexing can be done using bowtie2-build) in the alignment script, and also substitute the path to your picard.jar file. 

The alignment script is now ready to use. Make sure your FASTQ files have names like LIBRARYNAME_R1_001.fastq.gz and LIBRARYNAME_R2_001.fastq.gz. Then the
alignment script can be run for any library.

	code:
		bash InvertypeR/composite_files/alignment.sh "LIBRARYNAME"

To automate the procedure for all libraries, you could put this in a loop.

	code:
		for i in *R1_001.fastq.gz
		do 
			LIBRARYNAME=$(echo $i | sed 's/_R1_001\.fastq\.gz$//')
			bash InvertypeR/composite_files/alignment.sh "$LIBRARYNAME"
		done

Alternatively, you could use GNU parallel (https://www.gnu.org/software/parallel/).

	code: 
		ls *R1_001.fastq.gz | sed 's/_R1_001\.fastq\.gz$//' | parallel --jobs 12 bash InvertypeR/composite_files/alignment.sh {}

Now you should have a set of aligned BAM files with names like LIBRARYNAME.trimmed.sorted.mdup.bam, with their index files (.bai). Remove all other files in the 
directory (e.g., FASTQ files, SAM files, intermediate BAM files). At this point you should discard poor-quality Strand-seq libraries. Experts in the field may do
this manually, and more quickly, by inspecting the ideograms produced by BreakpointR (https://bioconductor.org/packages/release/bioc/html/breakpointR.html), but
an automated alternative was recently published (Gros et al. 2021; https://doi.org/10.1093/bioinformatics/btab221). Clone the GitHub repository 
(https://github.com/friendsofstrandseq/ashleys-qc) and install the dependencies as instructed. Once this is done, the automated quality selection can be run on 
your aligned BAM files as follows (in the conda environment provided). The flag "-j 12" controls the number of threads to use. 

	code: 
		/PATH/TO/FILE/ashleys.py -j 12 features -f ./ -w 5000000 2000000 1000000 800000 600000 400000 200000 -o ./features.tsv
		/PATH/TO/FILE/ashleys.py predict -p ./features.tsv -o ./quality.txt -m /PATH/TO/OTHER/FILE/svc_default.pkl

Using the file quality.txt, remove libraries with probability < 0.5. 

Now you have a directory containing only high-quality, aligned, sorted BAM files for your Strand-seq libraries. 



2. COMPOSITE FILES

The headers of the two composite file scripts (InvertypeR/composite_files/master_WCCW_composite.sh and InvertypeR/composite_files/master_WWCC_composite.sh)
need to be altered to match your requirements. For each, input the number of threads you wish to use for parallelization, the path to your copy of the GRCh38
reference genome (FASTA), the sex of the sample ("male" or "female"), and the path to the directory containing the composite bam scripts (e.g., 
PATH/TO/DIR/InvertypeR/composite_files/). Optionally, you can also input the path to a two-column, space-delimited file with the positions of known het. SNPs
for your sample (for the WC composite file). Then, simply run the following.

	code:
		bash InvertypeR/composite_files/master_WCCW_composite.sh
		bash InvertypeR/composite_files/master_WWCC_composite.sh

Once the scripts run (generally overnight), two composite BAM files should appear in the directories ./WW_CC and ./WC_CW. Examine the breakpoint plots
(e.g., ./WC_CW/BPR_output/plots/breaksPlot.pdf) and verify that all chromosomes are present. For female samples, both files should contain chromosomes
1-22,X. For male samples, the WC file should contain chromosomes 1-22 and the WW file should contain chromosomes 1-22,X,Y. The reads in the WW files should
all be in the same direction (i.e., appearing orange in the breakpoint plot), and the reads in the WC files should be in both directions (i.e., half 
orange and half green for each chromosome). In rare cases, a chromosome may be missing from the composite files because of a large SV that interfered with
composite file creation (usually visible in the breakpoint plots for individual libraries in ./BPR_output/plots/breaksPlot.pdf). If it affects a whole 
chromosome (e.g. 3-somy of chr7), proceed with the analysis but discard any inversion calls from the affected chromosome. If the SV affects only part of a 
chromosome, use the library-specific breakpoint plots or the UCSC Genome Browser files in ./BPR_output/browserfiles to estimate its coordinates, and add
those coordinates to the blacklist file InvertypeR/composite_files/blacklist.highdepth.centromeres.bed. Then, re-run the composite file scripts. 
However, such problems are rare and this is usually unnecessary. 

A second useful check of the integrity of your composite files is below. If errors appear (other than missing read groups), it may mean that the scripts 
crashed and the files are incomplete.

	code:
		java -jar '/PATH/TO/picard.jar' ValidateSamFile I="WC_CW/merged.WC.CW.bam" MODE=SUMMARY
		gunzip -t "WC_CW/merged.WC.CW.bam" && printf "VALID\n"



3. INVERSION CALLING

To install the R package InvertypeR, first make sure that you have devtools (https://cran.r-project.org/web/packages/devtools/index.html) installed. Then, 
run one of the two lines of code below to install InvertypeR. If BreakpointR fails to install, try installing it from Bioconductor separately first
(https://bioconductor.org/packages/release/bioc/html/breakpointR.html). 

	code:
		devtools::install_github(repo="vincent-hanlon/InvertypeR", subdir="invertyper")	
		devtools::install_git(url="https://github.com/vincent-hanlon/InvertypeR", ref="main", subdir="invertyper")

Next, you must obtain a list of putative inversion coordinates for genotyping and estimate prior probabilities. For some analyses, you will have a particular
inversion or set of inversions that you wish to genotype (e.g., inversions obtained with other data types). If this is the case, create a tab-separated BED
file of the form "chromosome	start	end" with the inversions. The prior probabilies might be estimated based on data you already have. For example, if 
you know that for a given set of 10 inversions a different sample had 1 HET inversion, 1 HOM inversion, and 8 REF genotypes, you could set the prior probabilities
as c("REF","HET","HOM")=c(0.8,0.1,0.1). For putative inversion coordinates about which you have no genotype information, we do not recommend using an
uninformative prior (e.g., c(0.33,0.33,0.33)). In our experience, REF is by far the most likely genotype for putative inversions. If you don't have a set of 
inversions in mind, consider using the list of 8787 (overlapping) putative inversion coordinates provided as Supplementary Data 24 in the InvertypeR paper
(also on GitHub under example_output). For this we recommend using the prior c("REF","HET","HOM")=c(0.9866,0.0067,0.0067). For male samples, you will also
need to provide prior probabilities for inversion on the X and Y chromoosomes. For the 8787 inversion coordinates, we use c(0.9866,2*0.0067). Similarly, choose an 
adjust_method that fits your analysis. If using the 8787 inversion coordinates provided, we recommend adjust_method="all". However, if you wish to leave the
inversion coordinates you provided unchanged, consider using adjust_method="raw". Finally, you should also provide a list of blacklisted regions, which can be the
same file used for composite file creation, above. For more information on the options available, open R, load invertyper, and run the command ?invertyper.

Here is an example of the code used to run InvertypeR.

	code:
		library(invertyper)
		invertyper("WW_CC/merged.WW.CC.bam", "WC_CW/merged.WC.CW.bam", bed="InvertypeR/example_output/sup_table_24_inversions.bed", 
			blacklist="InvertypeR/composite_files/blacklist.highdepth.centromeres.bed", paired_reads=TRUE, sex="male", confidence=0.95, 
			prior=c(0.9866,0.0067,0.0067), prior_male=c(0.9866,2*0.0067), adjust_method="all")

InvertypeR's output file contains one line per inversion, with the inversion coordinates, the read counts separated by composite file (WW or WC) and by strand
(W or C), the most likely genotype, the posterior genotype probability, and an optional column called low_read_density. For plotting, or for further analysis,
you may want to discard genotypes with low posterior probabilities (e.g., <0.95) or REF genotypes, and this is easily done using awk. 

	code:
		awk '$1=="chr" || ($8!="0" && $8!="0|0" && $9>=0.95)' inversions.txt

Moreover, some inversions may have "low read density: check for inaccurate inversion coordinates" in the low_read_density column. Often, such inversions span
long read-poor stretches of the genome, such as centromeres, and may be supported by only a handful of reads. The coordinates of these inversions should be
inspected, and perhaps adjusted, using the UCSC Genome Browser files produced for composite files in the previous section. Remember that some of the inversions
may actually be misoriented contigs in the reference genome; these cannot be identified with data from just one individual. 



4. VISUALIZATION

To visualize the inversion genotypes, we create PDF chromosome ideograms with lollipops representing (phased) inversions. Clicking on a lollipop opens a Genome
Browser session displaying reads from the composite files. Note that the links to the Genome Browser are impermanent, lasting for ~ 1 week. To create these
ideograms, clone the haplotplotR repository (linked from the InvertypeR repository), and after installing dependencies put an InvertypeR output file into
haploplotR/in. Then put the Genome Browser files for the composite files, created in Section 3 (WW_CC/BPR_output/browserfiles/*reads* and
WC_CW/BPR_output/browserfiles/*reads*) in the directory haploplotR/in/bed_reads/. Then move to the directory haplotplotR and execute the master script.

	code:
		git clone https://github.com/mattssca/haploplotR.git
		cd haploplotR # and mv the InvertypeR and composite browser files as described above
		cd ..
		bash haploplot_run.sh # You'll need to input the sex of the sample

The PDF ideogram should be visible in haploplotR/out/ideograms/. 
