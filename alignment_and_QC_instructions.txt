Updated for v0.0.0.2

0. OVERVIEW 

These step-by-step instructions detail how to turn a set of FASTQ-formatted Strand-seq libraries into QC'd Strand-seq BAM files, which is the recommended input for InvertypeR inversion calling, as outlined in the repo's README.

We assume that you use a Unix shell, and that you have installed R, samtools, bwa-mem2, git, and GNU parallel. We also assume you have cloned the InvertypeR repository, and that you have a set of gzipped, paired-end Strand-seq FASTQ files for a single individual that you would like to analyze. 

	Unix code (for cloning InvertypeR): 
		git clone https://github.com/vincent-hanlon/InvertypeR.git
		
1. ALIGNMENT

We also assume that you have downloaded the GRCh38 human reference genome. You will also need to index it.

	Unix code:
		bwa-mem2 index /path/to/reference/fasta/GRCh38

Put the FASTQ files in their own directory. We will to run the basic alignment script provided (alignment.sh). If you have brand new Strand-seq libraries and have not yet trimmed adapters, consider running CutAdapt (https://cutadapt.readthedocs.io/en/stable/) to do so, or at least run FASTQC (https://www.bioinformatics.babraham.ac.uk/projects/fastqc/) and check if there are any "Overrepresented Sequences" in the HTML file. However, if adapters have already been trimmed or if you downloaded the FASTQs from an online database, then there's no need to do any of that. Make sure your FASTQ files have names like LIBRARYNAME_R1_001.fastq.gz and LIBRARYNAME_R2_001.fastq.gz. The, move into the directory containing the FASTQ files and run the following, replacing numCPU_threads with an integer and filling in the file path.

	Unix code:
		bash /path/to/InvertypeR/alignment.sh numCPU_threads "/path/to/reference/fasta/GRCh38.fasta"

Now you should have a set of final, aligned BAM files with names like LIBRARYNAME.sorted.mdup.bam, with their index files (.bai). Clean up the working directory by moving intermediate files or FASTQ files to a subdirectory. At this point you should discard poor-quality Strand-seq libraries. Experts in the field may do
this manually by inspecting the ideograms produced by BreakpointR (https://bioconductor.org/packages/release/bioc/html/breakpointR.html), but
an automated alternative was recently published (Gros et al. 2021; https://doi.org/10.1093/bioinformatics/btab221). Clone the GitHub repository 
(https://github.com/friendsofstrandseq/ashleys-qc) and install the dependencies as instructed. Once this is done, the automated quality selection can be run on 
your aligned BAM files as follows (in the conda environment provided). The flag "-j 12" controls the number of threads to use. 

	Unix code: 
		/PATH/TO/FILE/ashleys.py -j 12 features -f ./ -w 5000000 2000000 1000000 800000 600000 400000 200000 -o ./features.tsv
		/PATH/TO/FILE/ashleys.py predict -p ./features.tsv -o ./quality.txt -m /PATH/TO/OTHER/FILE/svc_default.pkl

Using the file quality.txt, remove libraries with probability < 0.5. 

Now you have a directory containing only high-quality, aligned, sorted BAM files for your Strand-seq libraries. 

2. COMPOSITE FILES, INVERSION CALLING, and VISUALIZATION

(This material is now covered as part of the long-form user guide in the repo's README).

